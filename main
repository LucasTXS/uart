#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "driverlib/debug.h"
#include "driverlib/fpu.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"

#ifdef DEBUG
void
__error__(char *pcFilename, uint32_t ui32Line)
{
}
#endif


// A função definda abaixo manipula a interrupção da UART. 
void UARTIntHandler(void)
{
    uint32_t ui32Status;

    // Obtem o status atual da interrupção.
    ui32Status = UARTIntStatus(UART0_BASE, true);

    // Limpa as fontes de interrupção UART especificadas. Essa função deve ser chamada no manipulador
    // de interrupção para evitar que a interrupção seja acionada novamente imediatamente após a saída.
    UARTIntClear(UART0_BASE, ui32Status);

    //Enquanto houver dados na FIFO, a função UARTCharsAvail retorna verdadeiro e mantém no loop.
    while(UARTCharsAvail(UART0_BASE))
    {
    
        // Lê o próximo carácter da UART e escreve de volta na UART.
        //Retorna verdadeiro se o carácter foi colocado com sucesso no FIFO de transmissão ou falso se não há espaço disponível.
        UARTCharPutNonBlocking(UART0_BASE,
                                   UARTCharGetNonBlocking(UART0_BASE));
				   
        // Pisca o LED para mostrar que está ocorrendo uma transferência de caracteres.
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, GPIO_PIN_2);
	
        // Delay for 1 millisecond.  Each SysCtlDelay is about 3 clocks.
        //Aguarda por 1 milissegundo. Cada SysCtlDelay é cerca de 3 ciclos de clock.
        SysCtlDelay(SysCtlClockGet() / (1000 * 3));

        // Apago o LED.
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 0);
    }
}

// A função definda abaixo envia uma string para a UART.
void UARTSend(const uint8_t *pui8Buffer, uint32_t ui32Count)
{
    // Executa enquanto houverem caracteres a serem enviados.
    while(ui32Count--)
    {
        //Escreve o próximo caractere na UART.
        UARTCharPutNonBlocking(UART0_BASE, *pui8Buffer++);
    }
}

int main(void)
{
    // Habilita a unidade de ponto flutuante, permitindo que as instruções de ponto flutuante sejam executadas.
    FPUEnable();
    // Permite que instruções de ponto flutuante sejam usadas em manipuladores de interrupção.
    FPULazyStackingEnable();
   
    // Define o clock do dispositivo.
    SysCtlClockSet(SYSCTL_SYSDIV_1 | SYSCTL_USE_OSC | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);

    //Ativa a porta GPIO utilizada para controlar o LED da placa.
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

    // Habilita o pino que controla o LED como saída.
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_2);

    // Habilita o periférico da UART.
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    
    //  Habilita o periférico GPIOA.
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    
    // Habilita as interrupções do proccessador.
    IntMasterEnable();

    //
    // Define GPIO A0 e A1 como pinos UART.
    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    // Configura a UART utilizada, o clock, e o Baud Rate de 115.200, 8 bits de dados por byte,
    // um bit de parada, e sem bit de paridade
    UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,
                            (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |
                             UART_CONFIG_PAR_NONE));

    // Ativa a interrupção da UART.
    IntEnable(INT_UART0);
    UARTIntEnable(UART0_BASE, UART_INT_RX | UART_INT_RT);

    // Escreve uma mensagem na UART, solicitando que o usuário envie sua mensagem.
    UARTSend((uint8_t *)"\033 ENVIE SUA MSG: ", 16);

    // Estabelece um loop infinito, aguardando caracteres na UART, e enviando de volta quando recebidos.
    while(1)
    {
    }
}
